
name: IOSBUILD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
 IOS_RUN:
      runs-on: macos-latest
      env:
       XC_VERSION: ${{ '11.4' }}
       XC_SCHEME: ${{ 'MyReactNative' }}
       XC_CONFIGURATION: ${{ 'Release' }}
       XC_WORKSPACE: ${{ 'MyReactNative.xcworkspace' }}
       XC_ARCHIVE_PATH: ${{ './MyReactNative.xcarchive' }}
       XC_EXPORT_PATH: ${{ './artifacts/' }}
       XC_EXPORT_OPTIONS_FILE_PATH: ${{ './ExportOptions.plist' }}
       ENCRYPTED_CERTS_FILE_PATH: ${{ 'GithubCertificates.p12.gpg' }}
       DECRYPTED_CERTS_FILE_PATH: ${{ 'GithubCertificates.p12' }}
       ENCRYPTED_PROVISION_FILE_PATH: ${{ 'provisioning.tar.gz.gpg' }}
       DECRYPTED_PROVISION_FILE_PATH: ${{ 'provisioning.tar.gz' }}
       CERTS_ENCRYPTION_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
       PROVISION_ENCRYPTION_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
       CERTS_EXPORT_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
       KEYCHAIN: ${{ 'test.keychain' }}
      steps: 
      - uses: actions/checkout@v2
      - name: Install npm dependencies
        run: |
          npm install
      - name: Install pod dependencies
        run: |
          cd ios && npx pod-install
      
      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      - name: Configure Keychain
        run: |
         security create-keychain -p "" "$KEYCHAIN"
         security list-keychains -s "$KEYCHAIN"
         security default-keychain -s "$KEYCHAIN"
         security unlock-keychain -p "" "$KEYCHAIN"
         security set-keychain-settings
         security list-keychains
      - name: Configure Code Signing
        run: |
         cd ios
         gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
         gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISION_ENCRYPTION_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"
         security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
         security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
         tar xzvf $DECRYPTED_PROVISION_FILE_PATH
         mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
         for PROVISION in `ls ./*.mobileprovision`
         do
          UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
          cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
         done
      - name: Build ios app
        run: |       
          cd ios && xcodebuild -workspace MyReactNative.xcworkspace -scheme MyReactNative archive -archivePath MyReactNative.xcarchive -allowProvisioningUpdates
          xcodebuild -exportArchive -archivePath ./MyReactNative.xcarchive -exportPath ./build -exportOptionsPlist ExportOptions.plist
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: myapp.ipa
          path: ios/build/
